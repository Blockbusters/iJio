import cgi
import urllib
import webapp2
import jinja2
import os
import time

from google.appengine.api import users
from google.appengine.ext import ndb

jinja_environment = jinja2.Environment(
    loader = jinja2.FileSystemLoader(os.path.dirname(__file__) + "/templates"))

class User(ndb.Model):
    name = ndb.StringProperty()
    email = ndb.StringProperty()
    friendList = ndb.StringProperty(repeated=True, indexed=False) # list of user id
    eventList = ndb.IntegerProperty(repeated=True, indexed=False) # list of event id
    friendRequestList = ndb.StringProperty(repeated=True, indexed=False) # list of user id incoming friends requests
    friendRequestingList = ndb.StringProperty(repeated=True, indexed=False) # list of user id outgoing friend requests
    #TODO: calendar = ndb.StructuredProperty(Activity, repeated=True, indexed=False)

class Event(ndb.Model):
    eventID = ndb.IntegerProperty() #query count to associate ID
    #datetime = ndb.ComputedProperty()
    invitedUsers = ndb.StringProperty(repeated=True, indexed=False)
    acceptedUsers = ndb.StringProperty(repeated=True, indexed=False)
    rejectedUsers = ndb.StringProperty(repeated=True, indexed=False)
    
    #User Inputs
    name = ndb.StringProperty(indexed=False)
    location = ndb.StringProperty(indexed=False)
    description = ndb.StringProperty(indexed=False)
    dateRange = ndb.IntegerProperty(repeated=True) # pair of start and end date
 
MAIN_PAGE = """\
    <html>
		<body>
		    <p><a href="/login">Login</a></p>
		</body>
	</html>
"""

class MainPage(webapp2.RequestHandler):
    def get(self):
        self.redirect("/login")

#TODO: eventually shift to their individual html files to pretty up.        
LOGOUT_OPTION = """\
	<form action="/logout">
        <input type="submit" value="Logout">
	</form>
"""
NEWLINE = """\
<p></p>
"""
BACKHOME = """\
    <button method="get" onClick="location.href='/home' ">Back to Home Page</button>
"""
BACKSEARCH = """\
    <button method="get" onClick="location.href='/search' ">Back to Search</button>
"""
 
class LoginPage(webapp2.RequestHandler):
    def get(self):
        # Checks for active Google account session
        user = users.get_current_user()

        if user:
		# Successful Login
            qry = User.query(User.email == user.email())
            # New User
            if qry.count() == 0:
                self.redirect("/register")
            # Returning User
            else:
            	self.redirect("/home")
        else:
		# Request for login
            self.redirect(users.create_login_url(self.request.uri))

class Register(webapp2.RequestHandler):
    def get(self):
        user = users.get_current_user()
        qry = User.query(User.email == user.email())
        if qry.count() > 0:
            self.redirect("/home")
        else:
            self.response.write("Hello, welcome to iJio App for the first time!")
            self.response.write(NEWLINE)
            self.response.write("Note: Name cannot be changed once set.")
            temp = user.email()
            newuser = User(name = temp.title(), email = temp.lower(), friendList = [], eventList = [])
            userkey = newuser.put()
            self.response.write(NEWLINE)
            self.response.write("What is your name?")
            self.response.write("<html><body><form action =\"/update\">\
            <textarea name=\"content\">Default</textarea><p><input type=\"submit\" value=\"Submit Name\"></form>\
            </body></html>")
			
class LogOut(webapp2.RequestHandler):
	def get(self):
		self.redirect(users.create_logout_url('/'))

class HomePage(webapp2.RequestHandler):
    def get(self):
        user = users.get_current_user()
        qry = User.query(User.email == user.email())
        self.response.write("Welcome to iJio, " + str(qry.get().name))
        self.response.write("<p>You have " + str(len(qry.get().friendRequestList)) + " friend requests.")        
        self.response.write(NEWLINE)
        self.response.write("<form action=\"/manage\"><input type=\"submit\" value=\"Manage Friends\"></form><p>")
        self.response.write(LOGOUT_OPTION)
		
#TODO: Is it possible to shove all login required functionality into one python file where we can declare global user and qry?
#NOTE: sanitize inputs: ensure all names are in Proper Form and all emails are in lowercase.
#TODO: how to ensure name is not blank? my if blocks seem to crash the program lol
		
class Update(webapp2.RequestHandler):
	def get(self):
		user = users.get_current_user()
		qry = User.query(User.email == user.email())
		tempUser = qry.get()
		tempUser.name = self.request.get('content').title()
		tempUser.put()
		time.sleep(1) # import time. Waits for 1 second so that db can be updated with new name.
		self.redirect("/login")

class ManageFriends(webapp2.RequestHandler):
    def get(self):
        self.response.write("Friend List")
        self.response.write(NEWLINE)
        self.response.write("<button method=\"get\" onClick=\"location.href='/search'\">Find Friends</button>")
        self.response.write(NEWLINE)
        self.response.write("<button method=\"get\" onClick=\"location.href='/viewRequest'\">View Friend Request</button>")
        self.response.write(NEWLINE)
        self.response.write(BACKHOME)

class ViewRequests(webapp2.RequestHandler):
    def get(self):
        user = users.get_current_user()
        qrySelf = User.query(User.email == user.email())
        if len(qrySelf.get().friendRequestList) == 0:
            self.response.write("You have no friend requests.<p>")
            self.response.write(BACKHOME)
        else:
            self.response.write("Friend Requests: <p>")
            for friend in qrySelf.get().friendRequestList:
                qryFriend = User.query(User.email == friend)
                self.response.write("Name: " + qryFriend.get().name)
                self.response.write("<br>Email: " + qryFriend.get().email)
                self.response.write("<button method=\"get\" onClick=\"location.href='/acceptFriend?value={email}'\">Accept Friend</button>".format(email = friend))
                self.response.write(NEWLINE)

class AcceptFriend(webapp2.RequestHandler):
    def get(self):
        user = users.get_current_user()
        qrySelf = User.query(User.email == user.email())
        toAdd = self.request.get('value')
        qryFriend = User.query(User.email == toAdd)
        qrySelf.get().friendRequestList.remove(toAdd)
        qryFriend.get().friendRequestingList.remove(user.email())
        qrySelf.get().friendList.append(toAdd)
        qryFriend.get().friendList.append(user.email())
        qrySelf.get().put()
        qryFriend.get().put()
        time.sleep(1)
        self.redirect("/viewRequest")
       
class Search(webapp2.RequestHandler):
    def get(self):
        self.response.write("Who are you searching for?" + NEWLINE)
        self.response.write("<html><body><form action=\"/searchresults\">Name: <input type=\text\" name=\"name\"><br>or <br> Email: <input type=\"text\" name=\"email\"><br>\
        <input type=\"submit\" value=\"Submit\"></form></body></html>")
        self.response.write(BACKHOME)

class SearchResults(webapp2.RequestHandler):        
    def get(self):
        user = users.get_current_user()
        qrySelf = User.query(User.email == user.email())
        name = self.request.get('name').title()
        email = self.request.get('email').lower()
        qry1 = User.query(User.name == name)
        qry2 = User.query(User.email == email)
        numFound1 = qry1.count()
        numFound2 = qry2.count()
        self.response.write("We found " + str(numFound1) + " users with name: " + name)
        self.response.write(" and " + str(numFound2) + " users with email: " + email + NEWLINE)
        if numFound2 > 0:
            #email should be unique
            found = qry2.fetch(1)
            self.response.write(found)
        else: 
            for key in qry1.iter():
                email = key.email
                self.response.write(key.name)
                self.response.write(NEWLINE)
                self.response.write(email)
                case = checkAdding(email, qrySelf.get())
                if case == 1:
                    self.response.write("   <button disabled>You!</button>")
                elif case == 2:
                    self.response.write("   <button disabled>Friends</button>")
                    self.response.write(NEWLINE)
                elif case == 3:
                    self.response.write("   <button disabled>Friend Request Sent</button>")
                    self.response.write(NEWLINE)
                elif case == 4:
                    self.response.write("   <button disabled>Accept Friend Request</button>")
                    self.response.write(NEWLINE)
                else:
                    self.response.write("   <button method=\"get\" onclick = \"location.href = '/addfriend?value={email}'\">Add Friend</button>".format(email = email))
                    self.response.write(NEWLINE)
                self.response.write(NEWLINE)
        self.response.write(BACKSEARCH)
        self.response.write(BACKHOME)
    
#check if person has already been added
def checkAdding(personEmail, user):
    if personEmail == user.email:
        return 1
    for i in user.friendList:
        if personEmail == i:
            return 2
    for i in user.friendRequestingList:
        if personEmail == i:
            return 3
    for i in user.friendRequestList:
        if personEmail == i:
            return 4
    return False
        
class AddFriend(webapp2.RequestHandler):
    def get(self):
        user = users.get_current_user()
        qrySelf = User.query(User.email == user.email())
        toAdd = self.request.get('value')
        qryFriend = User.query(User.email == toAdd)
        qrySelf.get().friendRequestingList.append(toAdd)
        qryFriend.get().friendRequestList.append(user.email())
        qrySelf.get().put()
        qryFriend.get().put()
        self.redirect("/search")
        
        
        
app = webapp2.WSGIApplication([
    ('/', MainPage),
    ('/login', LoginPage),
    ('/home', HomePage),
    ('/register', Register),
    ('/logout', LogOut),
    ('/update', Update),
    ('/search', Search),
    ('/searchresults', SearchResults),
    ('/addfriend', AddFriend),
    ('/manage', ManageFriends),
    ('/viewRequest', ViewRequests),
    ('/acceptFriend', AcceptFriend),
], debug=True)


#TODO: DECIDE ON CALENDAR STRUCTURE
'''
    class Activity(ndb.Model):
    date = ndb.DateProperty()
    time = ndb.StringProperty()  
    availability = ndb.BooleanProperty() # true = occupied, false = free
    
class BitCalendar(ndb.Model):
'''
