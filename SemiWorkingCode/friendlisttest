import cgi
import urllib
import webapp2
import jinja2
import os
import time

from google.appengine.api import users
from google.appengine.ext import ndb

jinja_environment = jinja2.Environment(
    loader = jinja2.FileSystemLoader(os.path.dirname(__file__) + "/templates"))

class User(ndb.Model):
    name = ndb.StringProperty()
    email = ndb.StringProperty()
    friendList = ndb.StringProperty(repeated=True, indexed=False) # list of user id
    eventList = ndb.IntegerProperty(repeated=True, indexed=False) # list of event id
    #TODO: calendar = ndb.StructuredProperty(Activity, repeated=True, indexed=False)

class Event(ndb.Model):
    eventID = ndb.IntegerProperty()
    #datetime = ndb.ComputedProperty()
    invitedUsers = ndb.StringProperty(repeated=True, indexed=False)
    acceptedUsers = ndb.StringProperty(repeated=True, indexed=False)
    rejectedUsers = ndb.StringProperty(repeated=True, indexed=False)
    
    #User Inputs
    name = ndb.StringProperty(indexed=False)
    location = ndb.StringProperty(indexed=False)
    description = ndb.StringProperty(indexed=False)
    dateRange = ndb.IntegerProperty(repeated=True) # pair of start and end date
 
MAIN_PAGE = """\
    <html>
		<body>
		    <p><a href="/login">Login</a></p>
		</body>
	</html>
"""

class MainPage(webapp2.RequestHandler):
    def get(self):
        self.response.write("iJio Main Page")
        self.response.write(MAIN_PAGE)
 
LOGOUT_OPTION = """\
	<html>
		<body>
			<form action="/logout">
			    <input type="submit" value="Logout">
			</form>
		</body>
	</html>
"""
NEWLINE = """\
<html><body><p></p></body></html>
"""
CHANGE_NAME = """\
<html>
	<body>
		<form action="/changename"><input type="submit" value="Change Name"></form>
	</body>
</html>
"""
 
class LoginPage(webapp2.RequestHandler):
    def get(self):
        # Checks for active Google account session
        user = users.get_current_user()

        if user:
		# Successful Login
            qry = User.query(User.email == user.email())
            # New User
            if qry.count() == 0:
                self.response.write("Hello " + str(user.email()))
                self.response.write(NEWLINE + "Welcome to iJio App for the first time!")
                temp = user.email()
                newuser = User(name = temp,
            	                email = temp,
            	                friendList = [],
            	                eventList = [])
                userkey = newuser.put()
                self.response.write(NEWLINE)
                self.response.write(LOGOUT_OPTION)
            # Returning User
            else:
            	self.response.write("WELCOME BACK " + str(qry.get().name))
                self.response.write(CHANGE_NAME)
                self.response.write(LOGOUT_OPTION)
        else:
		# Request for login
            self.redirect(users.create_login_url(self.request.uri))
	
class LogOut(webapp2.RequestHandler):
	def get(self):
		self.redirect(users.create_logout_url('/'))

class ChangeName(webapp2.RequestHandler):
	def get(self):
		user = users.get_current_user()
		qry = User.query(User.email == user.email())
		self.response.write("Current name: " + str(qry.get().name) + NEWLINE)
		self.response.write("Change to: ")
		self.response.write("<html><body><form action =\"/update\">\
		<textarea name=\"content\"></textarea><p><input type=\"submit\" value=\"Change\"></form>\
		</body></html>")
		
class Update(webapp2.RequestHandler):
	def get(self):
		user = users.get_current_user()
		qry = User.query(User.email == user.email())
		tempUser = qry.get()
		tempUser.name = self.request.get('content')
		tempUser.put()
		time.sleep(1) # import time. Waits for 1 second so that db can be updated with new name.
		self.redirect("/login")
		
app = webapp2.WSGIApplication([
    ('/', MainPage),
    ('/login', LoginPage),
	('/logout', LogOut),
	('/changename', ChangeName),
	('/update', Update),
], debug=True)


#TODO: DECIDE ON CALENDAR STRUCTURE
'''
    class Activity(ndb.Model):
    date = ndb.DateProperty()
    time = ndb.StringProperty()  
    availability = ndb.BooleanProperty() # true = occupied, false = free
    
class BitCalendar(ndb.Model):
'''
